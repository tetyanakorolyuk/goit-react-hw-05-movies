{"version":3,"file":"static/js/420.967e644f.chunk.js","mappings":"kPACA,EAA4B,8BAA5B,EAAiE,yBAAjE,EAAmG,2BAAnG,EAA4I,gCAA5I,EAAoL,0BAApL,EAAwN,4BAAxN,EAA2P,yBAA3P,EAAgS,8BAAhS,EAAwU,4B,SCKzT,SAASA,IACtB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAcF,EAAaG,IAAI,SAC/BC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACR,IAAIC,EAAkB,IAAIC,gBAE1B,GAAmB,KAAhBN,EAAH,CAgBA,OAHIA,GATFO,EAAAA,GAA4BP,GAAaQ,MAAK,SAAAC,GAC5C,GAAwB,IAApBA,EAASC,OACX,OAAOhB,EAAU,MAEdW,EAAgBM,OAAOC,SAC1BlB,EAAUe,EAASI,YAOlB,WACLR,EAAgBS,YAEjB,CAACd,IAmBJ,OACE,iCACE,mBAAQe,UAAWC,EAAnB,UACE,kBAAMD,UAAWC,EAAQC,SAhBR,SAAAC,GAEnB,GADAA,EAAEC,iBACmB,KAAjBxB,EAAMyB,OAAV,CAIA,IACIC,EADW,IAAIC,SAASJ,EAAEK,eACNtB,IAAI,SACvBoB,IACLtB,EAAgB,CAAEJ,MAAO0B,IACzBzB,EAAS,OAMP,WACE,kBACAmB,UAAWC,EACXQ,KAAK,OACLC,aAAY,OAAEzB,QAAF,IAAEA,EAAAA,OAAe0B,EAC7BC,KAAK,QACLC,aAAa,MACbC,WAAS,EACTC,SA5Be,SAAAZ,GACnBtB,EAASsB,EAAEK,cAAcQ,MAAMC,gBA4B3BC,YAAY,mBAGZ,mBAAQT,KAAK,SAAST,UAAWC,EAAjC,UACE,iBAAMD,UAAWC,EAAjB,4BAKN,eAAID,UAAWC,EAAf,SACCvB,GACCA,EAAOyC,KAAI,SAAAC,GAAK,OACd,yBACE,UAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAME,IAAMtB,UAAWC,EAAQsB,MAAO,CAAEC,KAAMrC,GAAnE,WACA,gBAAKsC,IAAKL,EAAMM,YAAN,0CAC6BN,EAAMM,aAAgBC,EAAcC,IAAKR,EAAMS,SACtF,eAAI7B,UAAWC,EAAf,SAA6BmB,EAAMS,SACnC,cAAG7B,UAAWC,EAAd,SACKmB,EAAMU,aAAaC,MAAM,EAAG,GAAKX,EAAMU,aAAaC,MAAM,EAAG,GAAK,gBANhEX,EAAME,c","sources":["webpack://goit-react-hw-05-movies/./src/pages/MoviesPage/MoviesPage.module.css?7ea7","pages/MoviesPage/MoviesPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"MoviesPage_searchbar__zuyTo\",\"form\":\"MoviesPage_form__2deBf\",\"button\":\"MoviesPage_button__AUtxX\",\"buttonLabel\":\"MoviesPage_buttonLabel__puUpj\",\"input\":\"MoviesPage_input__16dJ5\",\"gallery\":\"MoviesPage_gallery__SYKcL\",\"link\":\"MoviesPage_link__Lj8cH\",\"movieName\":\"MoviesPage_movieName__3+KKL\",\"subName\":\"MoviesPage_subName__6IMv5\"};","import { useState, useEffect } from 'react';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport * as searchAPI from '../../services/movies-api';\nimport defaultImage from '../../images/defaultImage.jpg';\nimport s from './MoviesPage.module.css';\n\nexport default function MoviesPage() {\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState(\"\");\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const searchQuery = searchParams.get(\"query\");\n  const location = useLocation();\n\n  useEffect(() => {\n    let abortController = new AbortController();\n\n    if(searchQuery === \"\"){\n      return;\n    }\n    const getSearchMovies = () => {\n      searchAPI.fetchSearchMovies(searchQuery).then(response => {\n        if (response.length === 0) {\n          return setMovies(null);\n        }\n        if (!abortController.signal.aborted) {\n          setMovies(response.results);\n        }\n      });\n    };\n    if (searchQuery) {\n      getSearchMovies();\n    }\n    return () => {\n      abortController.abort();\n    };\n  }, [searchQuery]);\n\n    const handleChange = e => {\n      setQuery(e.currentTarget.value.toLowerCase());\n    };\n\n    const handleSubmit = e => {\n      e.preventDefault();\n      if (query.trim() === '') {\n        return;\n      }\n\n      let formData = new FormData(e.currentTarget);\n      let newQuery = formData.get(\"query\");\n      if (!newQuery) return;\n      setSearchParams({ query: newQuery });\n      setQuery('');\n    }\n\n  return (\n    <>\n      <header className={s.searchbar}>\n        <form className={s.form} onSubmit={handleSubmit}>\n          <input\n          className={s.input}\n          type=\"text\"\n          defaultValue={searchQuery ?? undefined}\n          name=\"query\"\n          autoComplete=\"off\"\n          autoFocus\n          onChange={handleChange}\n          placeholder=\"Search movies\"\n          />\n\n          <button type=\"submit\" className={s.button} >\n            <span className={s.buttonLabel}>Search</span>\n          </button>\n        </form>\n      </header>\n\n      <ul className={s.gallery}>\n      {movies &&\n        movies.map(movie => (\n          <li key={movie.id}>\n            <Link to={`/movies/${movie.id}`} className={s.link} state={{ from: location }}>\n            <img src={movie.poster_path\n              ? `https://image.tmdb.org/t/p/w300/${movie.poster_path}` : defaultImage} alt={movie.title} />\n            <h3 className={s.movieName}>{movie.title}</h3>\n            <p className={s.subName}>\n                {movie.release_date.slice(0, 4) ? movie.release_date.slice(0, 4) : 'Unknown'}\n              </p>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n"],"names":["MoviesPage","useState","movies","setMovies","query","setQuery","useSearchParams","searchParams","setSearchParams","searchQuery","get","location","useLocation","useEffect","abortController","AbortController","searchAPI","then","response","length","signal","aborted","results","abort","className","s","onSubmit","e","preventDefault","trim","newQuery","FormData","currentTarget","type","defaultValue","undefined","name","autoComplete","autoFocus","onChange","value","toLowerCase","placeholder","map","movie","to","id","state","from","src","poster_path","defaultImage","alt","title","release_date","slice"],"sourceRoot":""}